#!/bin/bash
set -e

# Configuration Variables
STACK_NAME="Demo"
ENV_TYPE="dev-test"
R53_ZONE_NAME=""
ADMIN_USER_EMAIL=""
PROJECT="TAK on AWS"
REGION="us-west-2"
BRANDING="generic"
LDAP_BASE_DN="dc=ldap,dc=tak"
LETS_ENCRYPT_MODE="production"
DEPLOY_CLOUDTAK=true

# Repository URLs
BASE_INFRA_REPO="https://github.com/TAK-NZ/base-infra"
AUTH_INFRA_REPO="https://github.com/TAK-NZ/auth-infra"
TAK_INFRA_REPO="https://github.com/TAK-NZ/tak-infra"
CLOUDTAK_REPO="https://github.com/TAK-NZ/CloudTAK"

# Store initial directory
INITIAL_DIR=$(pwd)

# Help function
show_help() {
    # Fetch current version requirement
    local REQUIRED_VERSION=$(curl -s https://raw.githubusercontent.com/TAK-NZ/tak-infra/main/cdk.json | grep '"version":' | head -1 | cut -d'"' -f4 2>/dev/null || echo "<version>")
    
    echo "TAK All Layers Deployment Script"
    echo ""
    echo "USAGE:"
    echo "  ./deployAllLayers [OPTIONS]"
    echo ""
    echo "OPTIONS:"
    echo "  --help              Show this help message"
    echo "  --destroy           Destroy all TAK infrastructure in reverse order"
    echo "  --r53ZoneName NAME  Override the Route53 zone name (e.g., demo.tak.nz)"
    echo "  --no-rollback       Disable rollback on deployment failure"
    echo ""
    echo "CONFIGURATION VARIABLES (edit at top of script):"
    echo "  STACK_NAME          Stack identifier (default: \"Demo\")"
    echo "  ENV_TYPE            Environment type: \"dev-test\" or \"prod\" (default: \"dev-test\")"
    echo "  R53_ZONE_NAME       Route53 hosted zone name (required for deployment)"
    echo "  ADMIN_USER_EMAIL    Admin user email - must be real/valid (default: admin@R53_ZONE_NAME)"
    echo "  PROJECT             Project name for tagging (default: \"TAK on AWS\")"
    echo "  REGION              AWS region (default: \"us-west-2\")"
    echo "  BRANDING            Branding type: \"generic\" or \"tak-nz\" (default: \"generic\")"
    echo "  LDAP_BASE_DN        LDAP base DN (default: \"dc=ldap,dc=tak\")"
    echo "  LETS_ENCRYPT_MODE   Let's Encrypt mode: \"staging\" or \"production\" (default: \"production\")"
    echo "  DEPLOY_CLOUDTAK     Deploy CloudTAK after TAK Server: true or false (default: false)"
    echo ""
    echo "PREREQUISITES:"
    echo "  - AWS CLI configured with appropriate credentials"
    echo "  - Docker installed and running"
    echo "  - Node.js and npm installed"
    echo "  - takserver-docker-${REQUIRED_VERSION}.zip file in current directory"
    echo ""
    echo "OPTIONAL FILES (uploaded to S3 if present):"
    echo "  - authentik-config.env"
    echo "  - takserver-config.env"
    echo "  - cloudtak-config.env"
    echo ""
    echo "EXAMPLES:"
    echo "  ./deployAllLayers --r53ZoneName demo.tak.nz    # Deploy with custom domain"
    echo "  ./deployAllLayers --destroy                     # Destroy all infrastructure"
}

# Parse command line arguments
DESTROY_MODE=false
NO_ROLLBACK=""
while [[ $# -gt 0 ]]; do
    case $1 in
        --help|-h)
            show_help
            exit 0
            ;;
        --destroy)
            DESTROY_MODE=true
            shift
            ;;
        --r53ZoneName)
            R53_ZONE_NAME="$2"
            shift 2
            ;;
        --no-rollback)
            NO_ROLLBACK="--no-rollback"
            shift
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Check prerequisites and mandatory parameters (skip for destroy mode)
if [ "$DESTROY_MODE" = false ]; then
    # Check Docker installation and status
    if ! command -v docker &> /dev/null; then
        echo "Error: Docker is not installed"
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        echo "Error: Docker is not running"
        exit 1
    fi
    
    if [ -z "$R53_ZONE_NAME" ]; then
        echo "Error: r53ZoneName must be set in configuration variables"
        exit 1
    fi
    
    # Check for mandatory files
    if ! ls takserver-docker-*.zip 1> /dev/null 2>&1; then
        # Fetch required version for error message
        REQUIRED_VERSION=$(curl -s https://raw.githubusercontent.com/TAK-NZ/tak-infra/main/cdk.json | grep '"version":' | head -1 | cut -d'"' -f4 2>/dev/null || echo "<version>")
        echo "Error: takserver-docker-${REQUIRED_VERSION}.zip file not found"
        exit 1
    fi
    
    # Check for optional files
    echo "Checking for optional configuration files:"
    [ -f "authentik-config.env" ] && echo "✓ authentik-config.env found" || echo "- authentik-config.env not found"
    [ -f "takserver-config.env" ] && echo "✓ takserver-config.env found" || echo "- takserver-config.env not found"
    [ -f "cloudtak-config.env" ] && echo "✓ cloudtak-config.env found" || echo "- cloudtak-config.env not found"
fi

# Function to clone or update repository
update_repo() {
    local repo_url=$1
    local repo_name=$(basename "$repo_url" .git)
    
    if [ -d "$repo_name" ]; then
        echo "Updating $repo_name..."
        cd "$repo_name"
        git fetch origin
        git reset --hard origin/main
        cd ..
    else
        echo "Cloning $repo_name..."
        git clone "$repo_url"
    fi
}

# Update repositories
update_repo "$BASE_INFRA_REPO"
update_repo "$AUTH_INFRA_REPO"
update_repo "$TAK_INFRA_REPO"

# Update CloudTAK repository if needed
if [ "$DEPLOY_CLOUDTAK" = true ]; then
    update_repo "$CLOUDTAK_REPO"
fi

# Validate TAK server version (skip for destroy mode)
if [ "$DESTROY_MODE" = false ]; then
    echo "Validating TAK server version..."
    REQUIRED_VERSION=$(grep -A 20 '"takserver"' tak-infra/cdk.json | grep '"version"' | head -1 | cut -d'"' -f4)
    LOCAL_ZIP=$(ls takserver-docker-*.zip 2>/dev/null | head -1)
    LOCAL_VERSION=$(echo "$LOCAL_ZIP" | sed 's/takserver-docker-\(.*\)\.zip/\1/')
    
    if [ "$LOCAL_VERSION" != "$REQUIRED_VERSION" ]; then
        echo "Error: TAK server version mismatch"
        echo "  Required: $REQUIRED_VERSION (from tak-infra/cdk.json)"
        echo "  Found:    $LOCAL_VERSION (from $LOCAL_ZIP)"
        echo "  Please download takserver-docker-$REQUIRED_VERSION.zip"
        exit 1
    fi
    echo "✓ TAK server version $LOCAL_VERSION matches requirement"
fi

if [ "$DESTROY_MODE" = true ]; then
    # Destroy stacks in reverse order
    echo "Destroying TAK infrastructure in reverse order..."
    
    # Destroy CloudTAK if enabled
    if [ "$DEPLOY_CLOUDTAK" = true ] && [ -d "CloudTAK" ]; then
        echo "Destroying CloudTAK..."
        cd CloudTAK/cdk
        npm install
        export CDK_DEFAULT_REGION="$REGION"
        npm run cdk destroy -- --context envType="$ENV_TYPE" --context stackName="$STACK_NAME" --force
        cd ../..
    fi
    
    # Destroy TakInfra
    echo "Destroying TakInfra..."
    cd tak-infra
    npm install
    export CDK_DEFAULT_REGION="$REGION"
    npm run cdk destroy -- --context envType="$ENV_TYPE" --context stackName="$STACK_NAME" --force
    cd ..
    
    # Destroy AuthInfra
    echo "Destroying AuthInfra..."
    cd auth-infra
    npm install
    export CDK_DEFAULT_REGION="$REGION"
    npm run cdk destroy -- --context envType="$ENV_TYPE" --context stackName="$STACK_NAME" --force
    cd ..
    
    # Empty S3 buckets before destroying BaseInfra
    echo "Emptying S3 buckets..."
    ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
    
    # Empty config bucket
    S3_BUCKET="tak-${STACK_NAME,,}-baseinfra-${REGION}-${ACCOUNT_ID}-config"
    echo "Emptying config bucket: $S3_BUCKET"
    aws s3 rm "s3://$S3_BUCKET" --recursive || true
    
    # Empty ELB logs bucket
    S3_ELB_BUCKET="tak-${STACK_NAME,,}-baseinfra-${REGION}-${ACCOUNT_ID}-elblogs"
    echo "Emptying ELB logs bucket: $S3_ELB_BUCKET"
    aws s3 rm "s3://$S3_ELB_BUCKET" --recursive || true
    
    # Destroy BaseInfra
    echo "Destroying BaseInfra..."
    cd base-infra
    npm install
    export CDK_DEFAULT_REGION="$REGION"
    npm run cdk destroy -- --context envType="$ENV_TYPE" --context stackName="$STACK_NAME" --force
    cd ..
    
    echo "Destruction completed successfully!"
else
    # Record start time
    START_TIME=$(date +%s)
    
    # Deploy BaseInfra
    echo "Deploying BaseInfra..."
    cd base-infra
    npm install
    export CDK_DEFAULT_REGION="$REGION"
    npm run cdk deploy -- \
        --context envType="$ENV_TYPE" \
        --context stackName="$STACK_NAME" \
        --context r53ZoneName="$R53_ZONE_NAME" \
        --context tak-project="$PROJECT" \
        --context tak-component="BaseInfra" \
        --context tak-region="$REGION" \
        --require-approval never $NO_ROLLBACK
    cd ..
    
    # Upload configuration files to S3
    echo "Uploading configuration files to S3..."
    ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
    S3_BUCKET="tak-${STACK_NAME,,}-baseinfra-${REGION}-${ACCOUNT_ID}-config"
    for config_file in "authentik-config.env" "takserver-config.env" "cloudtak-config.env"; do
        if [ -f "$INITIAL_DIR/$config_file" ]; then
            echo "Uploading existing $config_file"
            aws s3 cp "$INITIAL_DIR/$config_file" "s3://$S3_BUCKET/$config_file"
        else
            echo "Creating empty $config_file"
            touch "/tmp/$config_file"
            aws s3 cp "/tmp/$config_file" "s3://$S3_BUCKET/$config_file"
            rm "/tmp/$config_file"
        fi
    done
    
    # Set admin email if not provided
    if [ -z "$ADMIN_USER_EMAIL" ]; then
        ADMIN_USER_EMAIL="admin@$R53_ZONE_NAME"
    fi
    
    # Deploy AuthInfra
    echo "Deploying AuthInfra..."
    cd auth-infra
    npm install
    export CDK_DEFAULT_REGION="$REGION"
    echo "Using S3 Authentik config file"
    npm run cdk deploy -- \
        --context envType="$ENV_TYPE" \
        --context stackName="$STACK_NAME" \
        --context adminUserEmail="$ADMIN_USER_EMAIL" \
        --context branding="$BRANDING" \
        --context ldapBaseDn="$LDAP_BASE_DN" \
        --context tak-project="$PROJECT" \
        --context tak-component="AuthInfra" \
        --context tak-region="$REGION" \
        --context useS3AuthentikConfigFile=true \
        --require-approval never $NO_ROLLBACK
    cd ..
    
    # Deploy TakInfra
    echo "Deploying TakInfra..."
    cd tak-infra
    # Copy TAK server zip file to tak-infra directory
    cp "$INITIAL_DIR/takserver-docker-$REQUIRED_VERSION.zip" .
    npm install
    export CDK_DEFAULT_REGION="$REGION"    
    npm run cdk deploy -- \
        --context envType="$ENV_TYPE" \
        --context stackName="$STACK_NAME" \
        --context branding="$BRANDING" \
        --context letsEncryptMode="$LETS_ENCRYPT_MODE" \
        --context letsEncryptEmail="$ADMIN_USER_EMAIL" \
        --context tak-project="$PROJECT" \
        --context tak-component="TakInfra" \
        --context tak-region="$REGION" \
        --context useS3TAKServerConfigFile=true \
        --require-approval never $NO_ROLLBACK
    cd ..
    
    # Deploy CloudTAK if enabled
    if [ "$DEPLOY_CLOUDTAK" = true ]; then
        echo "Deploying CloudTAK..."
        cd CloudTAK/cdk
        npm install
        export CDK_DEFAULT_REGION="$REGION"
        npm run cdk deploy -- \
            --context envType="$ENV_TYPE" \
            --context stackName="$STACK_NAME" \
            --context tak-project="$PROJECT" \
            --context tak-component="CloudTAK" \
            --context tak-region="$REGION" \
            --context useS3CloudTAKConfigFile=true \
            --require-approval never $NO_ROLLBACK
        cd ../..
    fi
    
    # Calculate and display deployment duration
    END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))
    MINUTES=$((DURATION / 60))
    SECONDS=$((DURATION % 60))
        
    echo ""
    echo "========================================"
    echo "         DEPLOYMENT COMPLETE"
    echo "========================================"
    echo "Deployment completed in ${MINUTES}m ${SECONDS}s"
    echo ""
    
    # Display Authentik admin password
    echo "Authentik Admin Credentials:"
    AUTHENTIK_URL=$(aws cloudformation describe-stacks --stack-name "TAK-$STACK_NAME-AuthInfra" --region "$REGION" --query "Stacks[0].Outputs[?OutputKey=='AuthentikUrlOutput'].OutputValue" --output text)
    echo "Account URL: $AUTHENTIK_URL"
    ADMIN_CREDS=$(aws secretsmanager get-secret-value --secret-id "TAK-$STACK_NAME-AuthInfra/Authentik/Admin-Password" --query SecretString --output text)
    USERNAME=$(echo "$ADMIN_CREDS" | grep -o '"username":"[^"]*"' | cut -d'"' -f4)
    PASSWORD=$(echo "$ADMIN_CREDS" | grep -o '"password":"[^"]*"' | cut -d'"' -f4)
    echo "Username: $USERNAME"
    echo "Password: $PASSWORD"
    echo ""
    
    # Display TAK Service URL
    echo "TAK Server Information:"
    TAK_URL=$(aws cloudformation describe-stacks --stack-name "TAK-$STACK_NAME-TakInfra" --region "$REGION" --query "Stacks[0].Outputs[?OutputKey=='TakServiceUrl'].OutputValue" --output text)
    echo "TAK Service URL: $TAK_URL"
    
    # Download TAK Server admin certificate
    echo "Downloading TAK Server admin certificate..."
    aws secretsmanager get-secret-value --secret-id "TAK-$STACK_NAME-TakInfra/TAK-Server/Admin-Cert" --query SecretBinary --output text | base64 -d > "$INITIAL_DIR/tak-admin-cert.p12"
    echo "Admin certificate saved to: $INITIAL_DIR/tak-admin-cert.p12"

    # Display TAK Server URL
    TAK_SERVER_URL=$(aws cloudformation describe-stacks --stack-name "TAK-$STACK_NAME-TakInfra" --region "$REGION" --query "Stacks[0].Outputs[?OutputKey=='TakServerUrl'].OutputValue" --output text)
    echo "TAK Server URL (Admin Access): $TAK_SERVER_URL"
    
    # Display CloudTAK URL if deployed
    if [ "$DEPLOY_CLOUDTAK" = true ]; then
        echo ""
        echo "CloudTAK Admin Credentials:"
        CLOUDTAK_URL=$(aws cloudformation describe-stacks --stack-name "TAK-$STACK_NAME-CloudTAK" --region "$REGION" --query "Stacks[0].Outputs[?OutputKey=='ServiceURL'].OutputValue" --output text 2>/dev/null || echo "Not available")
        echo "CloudTAK URL: $CLOUDTAK_URL"
        
        # Display CloudTAK admin credentials
        CLOUDTAK_ADMIN_CREDS=$(aws secretsmanager get-secret-value --secret-id "TAK-$STACK_NAME-CloudTAK/API/Admin-Password" --query SecretString --output text 2>/dev/null || echo "Not available")
        if [ "$CLOUDTAK_ADMIN_CREDS" != "Not available" ]; then
            CLOUDTAK_USERNAME=$(echo "$CLOUDTAK_ADMIN_CREDS" | grep -o '"username":"[^"]*"' | cut -d'"' -f4)
            CLOUDTAK_PASSWORD=$(echo "$CLOUDTAK_ADMIN_CREDS" | grep -o '"password":"[^"]*"' | cut -d'"' -f4)
            echo "Username: $CLOUDTAK_USERNAME"
            echo "Password: $CLOUDTAK_PASSWORD"
        else
            echo "Admin credentials not available"
        fi
    fi
    
    echo "Deployment completed successfully!"

fi
